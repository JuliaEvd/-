#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <map>
#include <vector>
#include <algorithm>    
using namespace std;

map<char, int> table{ {'G', 57},
									{'A', 71},
									{'S', 87},
									{'P', 97},
									{'V', 99},
									{'T', 101},
									{'C', 103},
									{'I', 113},
									{'L', 113},
									{'N', 114},
									{'D', 115},
									{'K', 128},
									{'Q', 128},
									{'E', 129},
									{'M', 131},
									{'H', 137},
									{'F', 147},
									{'R', 156},
									{'Y', 163},
									{'W', 186} };






int weight(string peptide)
{
	int wt = 0, l = peptide.length();
	for (int i = 0; i < l; i++)
		wt = wt + table[peptide[i]];
	return wt;
}

void Cyclospectrum(vector<int> &ret, string peptide)
{
	ret.clear();
	ret.push_back(0);
	ret.push_back(weight(peptide));
	int n = peptide.length();
	peptide += peptide.substr(0, n - 1);
	for (int i = 1; i <= n - 1; i++)
	{
		for (int j = 0; j < n; j++)
		{
			ret.push_back(weight(peptide.substr(j, i)));
		}
	}
	sort(ret.begin(), ret.end());

}

int score(vector<int> &v, vector<int> &spectrum)
{
	int sc = 0;
	vector<int>::iterator it;
	vector<int>::iterator element;
	element = spectrum.begin();
	for (it = v.begin(); it != v.end(); it++)
	{
		while ((*element < *it) && (element != spectrum.end()))
			element++;
		if (*element == *it)
		{
			sc++;
			element++;
		}

	}
	return sc;
}


int main(int argc, char* argv[])
{
	string peptide;

	cin >> peptide;

	vector<int> ret, spectrum;
	int num;
	while (cin >> num)
		spectrum.push_back(num);



	Cyclospectrum(ret, peptide);
	cout << score(ret, spectrum) << endl;



	return 0;
}
